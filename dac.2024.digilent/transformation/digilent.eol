var randomMap = new Map;
var original_reading;
var new_reading = new Map;

"Begin...".println();
//showAllBlocksInformation();
init();
//execute(Sequence{"B", "C", "A", "A", "A", "A", "B", "A"});

//test1();
//test2();
//iterateResistor("Resistor1");
//randomMap.keySet().println();



"Done".println();
operation test1(){
	execute(Sequence{"E", "E", "E", "E", "E", "E", "E", "E"});
	execute(Sequence{"A", "E", "E", "E", "E", "E", "E", "E"});
	execute(Sequence{"E", "A", "E", "E", "E", "E", "E", "E"});
	execute(Sequence{"E", "E", "A", "E", "E", "E", "E", "E"});
	execute(Sequence{"E", "E", "E", "A", "E", "E", "E", "E"});
	execute(Sequence{"E", "E", "E", "E", "A", "E", "E", "E"});
	execute(Sequence{"E", "E", "E", "E", "E", "A", "E", "E"});
	execute(Sequence{"E", "E", "E", "E", "E", "E", "A", "E"});
	execute(Sequence{"E", "E", "E", "E", "E", "E", "E", "A"});
}

operation test2(){
	var alphabet = Sequence {"A", "B", "C", "D"};
//	var alphabet = Sequence {"A", "B"};
	var number = 1;
	for (a in alphabet){
		for (b in alphabet){
			for (c in alphabet){
				for (d in alphabet){
					for (e in alphabet){
						for (f in alphabet){
							number.println();
							var input = Sequence{};
							input.add(a);
							input.add(b);
							input.add(c);
							input.add("A");
							input.add("A");
							input.add(d);
							input.add(e);
							input.add(f);
							execute(input);
							number++;
						}
					}
				}
			}
		}
	}
}

// inputs is a Sequence which has 7 String, ABCD.
operation execute(inputs : Sequence){
	inputs.println();
	setComponent("Variable Resistor", inputs[0]);
	setComponent("Variable Resistor1", inputs[1]);
	setComponent("Variable Resistor2", inputs[2]);
	setComponent("Variable Resistor3", inputs[3]);
	setComponent("Variable Resistor4", inputs[4]);
	setComponent("Source", inputs[5]);
	setComponent("Op-Amp", inputs[6]);
	setComponent("Op-Amp1", inputs[7]);
	simulate();
	new_reading.put("array", getReading("u"));
	save_reading_result(inputs);
}

operation save_reading_result(inputs : Sequence) {
	var readings = new_reading.get("array");
	var a = new T!Origin;
	a.one = inputs[0];
	a.two = inputs[1];
	a.three = inputs[2];
	a.four = inputs[3];
	a.five = inputs[4];
	a.six = inputs[5];
	a.seven = inputs[6];
	a.eight = inputs[7];
	a.mean = (mean(readings)-6.65).abs();
	a.std = std(readings);
	a.percent = (std(readings)*3+(mean(readings)-6.65))/6.65*100;
	a.cost = inputs.getCost();
	("mean:" + a.mean + "  std:" + a.std + "  percent:" + a.percent + "  cost:" + a.cost).println();
}

operation Sequence getCost(){
	var costs = getCosts();
	var cost = 0.0;
	for (i in 0.to(7)){
		switch(self[i]) {
		case "A": cost += costs[i].A.asReal();
		case "B": cost += costs[i].B.asReal();
		case "C": cost += costs[i].C.asReal();
		case "D": cost += costs[i].D.asReal();
		case "E": cost += costs[i].E.asReal();
		}
	}
	return cost;
}

operation setComponent(name: String, attr : String) {
	var component = getBlockFuzzy(name);
	var value = getLevel(name, attr);
	var random = randomMap.get(name);
	random.Variance = value;
	random.Seed = getRandomInt(1000);
}

//operation iterateResistors() {
//	var resistor = getBlockFuzzy(randomMap.keySet().first());
//	var level = getLevel(resistor.Name, "A");
//	var random = randomMap.get(resistor.Name);
//	random.Variance = level;
//	simulate();	
//	new_reading = getReading("u");
//	new_reading.last.println();
//	save_reading_resistor(new_reading, "A");
//}

//operation iterateResistor(resistor) {
//	var resistor = getBlockFuzzy(randomMap.keySet().first());
//	var level = getLevel(resistor.Name, "A");
//	var random = randomMap.get(resistor.Name);
//	random.Variance = level;
//	simulate();	
//	new_reading.put("A", getReading("u"));
//	
//	//B
//	var level = getLevel(resistor.Name, "B");
//	var random = randomMap.get(resistor.Name);
//	random.Variance = level;
//	simulate();	
//	new_reading.put("B", getReading("u"));
//	
//	//C
//	var level = getLevel(resistor.Name, "C");
//	var random = randomMap.get(resistor.Name);
//	random.Variance = level;
//	simulate();	
//	new_reading.put("C", getReading("u"));
//	
//	//D
//	var level = getLevel(resistor.Name, "D");
//	var random = randomMap.get(resistor.Name);
//	random.Variance = level;
//	simulate();	
//	new_reading.put("D", getReading("u"));
//	for(v in new_reading.values()) {
//		v.size().println();
//	}
//	save_reading_resistor();
//}

operation mean(input) {
	return input.sum()/(input.size()-1);
}

operation std(input) {
	var mean = mean(input);
	var diff = 0;
	var math = Native("java.lang.Math");
	for(i in input) {
		diff += math.pow(i-mean, 2);
	}
	return math.sqrt(diff/(input.size()-1));
}

operation simulate() {
	M.simulate();
}


operation init() {
	initMap();
	simulate();
	original_reading = getReading("u");
//	original_reading.size().println();
//	save_reading(original_reading);
}

operation getRandomInt(n){
	var rand = new Native("java.util.Random");
	return rand.nextInt(n);
}

//operation save_reading_resistor() {
//	var readingsA = new_reading.get("A");
//	var readingsB = new_reading.get("B");
//	var readingsC = new_reading.get("C");
//	var readingsD = new_reading.get("D");
//	
//	std(readingsA).println();
//	var a = new T!Resistor1;
//	a.A = mean(readingsA);
//	a.B = mean(readingsB);
//	a.C = mean(readingsC);
//	a.D = mean(readingsD);
//	
////	readingsA.size().println();
////	readingsB.size().println();
////	readingsC.size().println();
////	readingsD.size().println();
////	for(i in Sequence{0.. (readingsA.size()-2)}) {
////		var a = new T!Resistor1;
////		a.A = readingsA.at(i);
////		a.B = readingsB.at(i);
////		a.C = readingsC.at(i);
////		a.D = readingsD.at(i);
////	}
//}


operation save_reading(readings) {
	for(r in readings) {
		var reading = new T!Origin;
		reading.Value = r;
	}
}

operation getReading(simout : String) {
	var engine = getEngine();
	engine.evalAsync("s = simout.get('"+simout+"')");
	var s = engine.getVariable("s");
	return s;
}

operation getLevel(name, level) {
	var block = randomMap.get(name);
	var diff = getComponents().select(c|c.Name = name).first();
	var ret;
	switch(level) {
		case "A": ret = diff.A;
		case "B": ret = diff.B;
		case "C": ret = diff.C;
		case "D": ret = diff.D;
		case "E": ret = diff.E;
	}
	var rate = ret.asReal();
	var value = diff.Value.asReal();
	return (rate*value/3.0).pow(2);
}

operation simulate() {
	M.simulate();
}

@cached
operation getEngine() {
	return M.engine;
}

@cached
operation getComponents() {
	return E!Component.all;
}

operation getCosts() {
	return E!Cost.all;
}

operation initMap() {
	var components = getComponents();
	for(c in components) {
		var random = getRandom(c.Random);
		randomMap.put(c.Name, random);
	}
}

operation getRandom(name) {
	var randoms = getAllBlocks().select(r|r.BlockType = "RandomNumber");
	return randoms.selectOne(r|r.Name.endsWith(name));
}

operation singleResistor(name, level) {
	var block = getBlock(name);
	
}

operation getBlockByHandle(handle) {
	return getAllBlocks().select(b|b.handle = handle).first;
}

@cached
operation getAllBlocks() {
	return M!Block.all();
}

operation getBlockFuzzy(name : String) {
	return getAllBlocks().select(b|b.Name = name).first();
}

operation getBlock(name) {
	return getAllBlocks().select(b|b.Name = name).first();
}

operation showAllBlocksInformation(){
//	var vr = new `fl_lib/Electrical/Electrical Elements/Variable Resistor`;
//	vr.println();
	var blocks = M!Block.all;
//	blocks.println();
	for (b in blocks){
		"_______________________________________________".println();
		b.println();
		("b.Path                = "+b.Path).println();
		("b.Position            = "+b.Position).println();
		("b.Name                = "+b.Name).println();
		("b.Handle              = "+b.Handle).println();
		("b.BlockType           = "+b.BlockType).println();
		("b.PortHandles.Inport  = "+b.PortHandles.Inport).println();
		("b.PortHandles.Outport = "+b.PortHandles.Outport).println();
//		("b.PortHandles.Enable  = "+b.PortHandles.Enable).println();
//		("b.PortHandles.Trigger = "+b.PortHandles.Trigger).println();
//		("b.PortHandles.State   = "+b.PortHandles.State).println();
		("b.PortHandles.LConn   = "+b.PortHandles.LConn).println();
		("b.PortHandles.RConn   = "+b.PortHandles.RConn).println();
//		("b.PortHandles.Ifaction= "+b.PortHandles.Ifaction).println();
//		("b.PortHandles.Reset   = "+b.PortHandles.Reset).println();
//		("b.PortHandles.Event   = "+b.PortHandles.Event).println();
		for (line in b.portconnectivity){
			if (line.isDefined()){
				"+++++++++++++++++++++++".println();
				("line                  = "+line).println();
				("line.Position         = "+line.Position).println();
				("line.SrcBlock         = "+line.SrcBlock).println();
				("line.SrcPort          = "+line.SrcPort).println();
				("line.DstBlock         = "+line.DstBlock).println();
				("line.DstPort          = "+line.DstPort).println();
			}
		}
	}
}

//operation test() {
//	getLevel("Variable Resistor", "A").println();
//
//	getLevel("Source", "A").println();
//	
//	getLevel("Op-Amp", "A").println();
//	
//	for(k in randomMap.keySet()) {
//		getBlockFuzzy(k).println();
//	}
//}