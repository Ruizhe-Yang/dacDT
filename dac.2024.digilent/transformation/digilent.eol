
var randomMap = new Map;
var original_reading;
var new_reading = new Map;

"Begin...".println();
init();
iterateResistor("Resistor1");

"Done".println();

operation iterateResistors() {
	var resistor = getBlockFuzzy(randomMap.keySet().first());
	var level = getLevel(resistor.Name, "A");
	var random = randomMap.get(resistor.Name);
	random.Variance = level;
	simulate();	
	new_reading = getReading("u");
	new_reading.last.println();
	save_reading_resistor(new_reading, "A");
}

operation mean(input) {
	return input.sum()/input.size();
}

operation std(input) {
	var mean = mean(input);
	var diff = 0;
	var math = Native("java.lang.Math");
	for(i in input) {
		diff += math.pow(i-mean, 2);
	}
	return math.sqrt(diff/input.size());
}



operation iterateResistor(resistor) {
	var resistor = getBlockFuzzy(randomMap.keySet().first());
	var level = getLevel(resistor.Name, "A");
	var random = randomMap.get(resistor.Name);
	random.Variance = level;
	simulate();	
	new_reading.put("A", getReading("u"));
	
	//B
	var level = getLevel(resistor.Name, "B");
	var random = randomMap.get(resistor.Name);
	random.Variance = level;
	simulate();	
	new_reading.put("B", getReading("u"));
	
	//C
	var level = getLevel(resistor.Name, "C");
	var random = randomMap.get(resistor.Name);
	random.Variance = level;
	simulate();	
	new_reading.put("C", getReading("u"));
	
	//D
	var level = getLevel(resistor.Name, "D");
	var random = randomMap.get(resistor.Name);
	random.Variance = level;
	simulate();	
	new_reading.put("D", getReading("u"));
	for(v in new_reading.values()) {
		v.size().println();
	}
	save_reading_resistor();
}

operation simulate() {
	M.simulate();
}


operation init() {
	initMap();
	simulate();
	original_reading = getReading("u");
	original_reading.size().println();
	save_reading(original_reading);
}

operation save_reading_resistor() {
	var readingsA = new_reading.get("A");
	var readingsB = new_reading.get("B");
	var readingsC = new_reading.get("C");
	var readingsD = new_reading.get("D");
	
	std(readingsA).println();
	var a = new T!Resistor1;
	a.A = mean(readingsA);
	a.B = mean(readingsB);
	a.C = mean(readingsC);
	a.D = mean(readingsD);
	
//	readingsA.size().println();
//	readingsB.size().println();
//	readingsC.size().println();
//	readingsD.size().println();
//	for(i in Sequence{0.. (readingsA.size()-2)}) {
//		var a = new T!Resistor1;
//		a.A = readingsA.at(i);
//		a.B = readingsB.at(i);
//		a.C = readingsC.at(i);
//		a.D = readingsD.at(i);
//	}
}


operation save_reading(readings) {
	for(r in readings) {
		var reading = new T!Origin;
		reading.Value = r;
	}
}

operation getReading(simout : String) {
	var engine = getEngine();
	engine.evalAsync("s = simout.get('"+simout+"')");
	var s = engine.getVariable("s");
	return s;
}

operation getLevel(name, level) {
	var block = randomMap.get(name);
	var diff = getComponents().select(c|c.Name = name).first();
	var ret;
	switch(level) {
		case "A": ret = diff.A;
		case "B": ret = diff.B;
		case "C": ret = diff.C;
		case "D": ret = diff.D;
	}
	return ret;
}

operation simulate() {
	M.simulate();
}

@cached
operation getEngine() {
	return M.engine;
}

@cached
operation getComponents() {
	return E!Component.all;
}

operation initMap() {
	var components = getComponents();
	for(c in components) {
		var random = getRandom(c.Random);
		randomMap.put(c.Name, random);
	}
	randomMap.println();
}

operation getRandom(name) {
	var randoms = getAllBlocks().select(r|r.BlockType = "RandomNumber");
	return randoms.selectOne(r|r.Name.endsWith(name));
}

operation singleResistor(name, level) {
	var block = getBlock(name);
	
}

operation getBlockByHandle(handle) {
	return getAllBlocks().select(b|b.handle = handle).first;
}

@cached
operation getAllBlocks() {
	return M!Block.all();
}

operation getBlockFuzzy(name) {
	return getAllBlocks().select(b|b.Name.endsWith(name)).first;
}

operation getBlock(name) {
	return getAllBlocks().select(b|b.Name = name).first;
}

operation showAllBlocksInformation(){
//	var vr = new `fl_lib/Electrical/Electrical Elements/Variable Resistor`;
//	vr.println();
	var blocks = M!Block.all;
//	blocks.println();
	for (b in blocks){
		"_______________________________________________".println();
		b.println();
		("b.Path                = "+b.Path).println();
		("b.Position            = "+b.Position).println();
		("b.Name                = "+b.Name).println();
		("b.Handle              = "+b.Handle).println();
		("b.BlockType           = "+b.BlockType).println();
		("b.PortHandles.Inport  = "+b.PortHandles.Inport).println();
		("b.PortHandles.Outport = "+b.PortHandles.Outport).println();
//		("b.PortHandles.Enable  = "+b.PortHandles.Enable).println();
//		("b.PortHandles.Trigger = "+b.PortHandles.Trigger).println();
//		("b.PortHandles.State   = "+b.PortHandles.State).println();
		("b.PortHandles.LConn   = "+b.PortHandles.LConn).println();
		("b.PortHandles.RConn   = "+b.PortHandles.RConn).println();
//		("b.PortHandles.Ifaction= "+b.PortHandles.Ifaction).println();
//		("b.PortHandles.Reset   = "+b.PortHandles.Reset).println();
//		("b.PortHandles.Event   = "+b.PortHandles.Event).println();
		for (line in b.portconnectivity){
			if (line.isDefined()){
				"+++++++++++++++++++++++".println();
				("line                  = "+line).println();
				("line.Position         = "+line.Position).println();
				("line.SrcBlock         = "+line.SrcBlock).println();
				("line.SrcPort          = "+line.SrcPort).println();
				("line.DstBlock         = "+line.DstBlock).println();
				("line.DstPort          = "+line.DstPort).println();
			}
		}
	}
}

operation test() {
	getLevel("Variable Resistor", "A").println();

	getLevel("Source", "A").println();
	
	getLevel("Op-Amp", "A").println();
	
	for(k in randomMap.keySet()) {
		getBlockFuzzy(k).println();
	}
}