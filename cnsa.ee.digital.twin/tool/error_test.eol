import "simulink2dt.eol";

"Begin run...".println();
main();
"Run done!".println();

operation main(){
	// Create elements
	var sineWave = new `simulink/Sources/Sine Wave`;
	var gain = new `simulink/Math Operations/Gain`;
	var saturation = new `simulink/Discontinuities/Saturation`;
	var busCreator = new `simulink/Signal Routing/Bus Creator`;
	var scope = new `simulink/Sinks/Scope`;

	// Position them on the diagram
	sineWave.position = "[100 100 130 130]";
	gain.position = "[200 100 230 130]";
	saturation.position = "[300 100 330 130]";
	busCreator.position = "[400 70 410 300]";
	scope.position = "[500 175 530 205]";
	
	// Set their properties
	gain.gain = 2;
	busCreator.inputs = 3;
	
	
	// Link them
	sineWave.link(gain);
	gain.link(saturation);
	saturation.link(busCreator);
	gain.linkTo(busCreator, 2);
	sineWave.linkTo(busCreator, 3);
	busCreator.link(scope);
	
	//sineWave.unlink(gain);
	
//	getSuccessor(sineWave).println();
	
//	showAllBlocksInfotation();
//	"+++++++++++++++++++++++++++++++++++++++++++++++++++".println();
//	S.simulate();
//	blocks.println();
	for (b in S!Block.all){
		var lines = getLinesFrom(b);
		for(l in lines) {
			delete l;
		}
		delete b;
	}
//	delete sineWave;
//	delete gain;
//	delete saturation;
//	delete busCreator;
//	delete scope;
	showAllBlocksInfotation();
}

operation showAllBlocksInfotation(){
	var blocks = S!Block.all;
//	blocks.println();
	for (b in blocks){
		"_______________________________________________".println();
//		b.println();
		("b.Path                = "+b.Path).println();
		("b.Position            = "+b.Position).println();
		("b.Name                = "+b.Name).println();
		("b.Handle              = "+b.Handle).println();
		("b.BlockType           = "+b.BlockType).println();
		("b.PortHandles.Inport  = "+b.PortHandles.Inport).println();
		("b.PortHandles.Outport = "+b.PortHandles.Outport).println();
//		("b.PortHandles.Enable  = "+b.PortHandles.Enable).println();
//		("b.PortHandles.Trigger = "+b.PortHandles.Trigger).println();
//		("b.PortHandles.State   = "+b.PortHandles.State).println();
		("b.PortHandles.LConn   = "+b.PortHandles.LConn).println();
		("b.PortHandles.RConn   = "+b.PortHandles.RConn).println();
//		("b.PortHandles.Ifaction= "+b.PortHandles.Ifaction).println();
//		("b.PortHandles.Reset   = "+b.PortHandles.Reset).println();
//		("b.PortHandles.Event   = "+b.PortHandles.Event).println();
		for (line in b.portconnectivity){
			if (line.isDefined()){
				"+++++++++++++++++++++++".println();
				("line                  = "+line.SrcBlock).println();
				("line.SrcBlock         = "+line.SrcBlock).println();
				("line.SrcPort          = "+line.SrcPort).println();
				("line.DstBlock         = "+line.DstBlock).println();
				("line.DstPort          = "+line.DstPort).println();
			}
		}
	}
}

operation getLinesFrom(element: Any) {
	var ret = new Sequence;
	var lines = Line.all();
	for(l in lines) {
		if(l.getSource = element) {
			ret.add(l);
		}
	}
	return ret;
}
