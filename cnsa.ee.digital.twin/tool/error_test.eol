import "simulink2dt.eol";

var map = new Map;
var randMap = new Map;

"Begin run...".println();
createElements();
"Run done!".println();

operation main(){
//	for (b in S!Block.all){
//		b.unlink();
//		delete b;
//	}
//	delete sineWave;
//	delete gain;
//	delete saturation;
//	delete busCreator;
//	delete scope;
//	createElements();
//	showAllBlocksInformation();
	var gain : `simulink/Math Operations/Gain`;
	for (b in S!Block.all){
		if (b.type = "Gain"){
			
			"++++".println();
		}
	}
}

operation createElements(){
	// Create elements
	var sineWave = new `simulink/Sources/Sine Wave`;
	var gain = new `simulink/Math Operations/Gain`;
	var saturation = new `simulink/Discontinuities/Saturation`;
	var busCreator = new `simulink/Signal Routing/Bus Creator`;
	var scope = new `simulink/Sinks/Scope`;

	// Position them on the diagram
	sineWave.position = "[100 100 130 130]";
	gain.position = "[200 100 230 130]";
	saturation.position = "[300 100 330 130]";
	busCreator.position = "[400 70 410 300]";
	scope.position = "[500 175 530 205]";
	
	// Set their properties
	gain.gain = 2;
	busCreator.inputs = 3;
	
	// Link them
	sineWave.link(gain);
	gain.link(saturation);
	saturation.link(busCreator);
	gain.linkTo(busCreator, 2);
	sineWave.linkTo(busCreator, 3);
	busCreator.link(scope);
	
	
	populateMap();
//	sineWave.handle.println();
//	map.keySet().println();
//	map.keySet().contains(sineWave).println();
//	map.get(sineWave.handle).println();
	attachRandToElement(sineWave, 1);
	
	
//	for (b in S!Block.all){
//		var lines = getLinesFrom(b);
//		for(l in lines) {
//			delete l;
//		}
//		delete b;
//	}
//	showAllBlocksInfotation();
}

operation showAllBlocksInformation(){
	var blocks = S!Block.all;
//	blocks.println();
	for (b in blocks){
		"_______________________________________________".println();
		b.println();
		("b.Path                = "+b.Path).println();
		("b.Position            = "+b.Position).println();
		("b.Name                = "+b.Name).println();
		("b.Handle              = "+b.Handle).println();
		("b.BlockType           = "+b.BlockType).println();
		("b.PortHandles.Inport  = "+b.PortHandles.Inport).println();
		("b.PortHandles.Outport = "+b.PortHandles.Outport).println();
//		("b.PortHandles.Enable  = "+b.PortHandles.Enable).println();
//		("b.PortHandles.Trigger = "+b.PortHandles.Trigger).println();
//		("b.PortHandles.State   = "+b.PortHandles.State).println();
		("b.PortHandles.LConn   = "+b.PortHandles.LConn).println();
		("b.PortHandles.RConn   = "+b.PortHandles.RConn).println();
//		("b.PortHandles.Ifaction= "+b.PortHandles.Ifaction).println();
//		("b.PortHandles.Reset   = "+b.PortHandles.Reset).println();
//		("b.PortHandles.Event   = "+b.PortHandles.Event).println();
		for (line in b.portconnectivity){
			if (line.isDefined()){
				"+++++++++++++++++++++++".println();
				("line                  = "+line).println();
				("line.Position         = "+line.Position).println();
				("line.SrcBlock         = "+line.SrcBlock).println();
				("line.SrcPort          = "+line.SrcPort).println();
				("line.DstBlock         = "+line.DstBlock).println();
				("line.DstPort          = "+line.DstPort).println();
			}
		}
	}
}

@cached
operation getAllLines() {
	return Line.all();
}

@cached
operation getAllBlocks() {
	return Block.all();
}

operation getPortNumber(element: Any, line: Any) {
	var inports = element.getInports();
	var i = 1;
	for(port in inports) {
		if(port.getLines().contains(line)) {
			return i;
		}
		i++;
	}
}


operation attachRandToElement(element: Any, index: Integer) {
	//get lines sequence from map
	var lines = map.get(element.handle);
	
	//create random and get the sum (which connects the element, and the target)
	var rand = createRand();
	var sum = rand.at(1);
	
	
	//get the line struct at the specific index
	var line = lines.at(index-1);
	line.println();
	//get the line
	var l = line.at(0);
	//get the target the line connects
	var target = line.at(1);
	
	var i = getPortNumber(target, l);
	
	i.println();
	
//	var dport = l.getDestinationPort();
//	dport.println();
	
	//delete l
	delete l;
	
	//connect sum to target (using the same index)
	sum.linkTo(target, i);
	//connect element to sum (using index)
	element.linkTo(sum, 2);
	
	//put the rand in the map
	randMap.put(element, rand);
	
	//extended property to record the previous target
	element.~target = target;
}

operation removeRandFromElement(element: Any, index: Integer) {
	//get the rand for the element
	var rand = randMap.get(element);
	
	if(rand.isDefined()) {
		//if rand is defined, the ~target property must be set
		var target = element.~target;
		
		//get the sum
		var sum = rand.at(1);
		
		//disconnect the sum first
		element.unlinkTo(sum, index);
		
		//connect element to its original target
		element.linkTo(target, index);
		
		//remove the random sequence{rand, sum}
		removeRand(rand);
	}
	
}

/*
*This function removes the rand
*/
operation removeRand(seq: Sequence) {
	var rand = seq.at(0);
	var line = getLinesFrom(rand).at(0);
	var sum = seq.at(1);
	delete rand;
	delete sum;
	delete line;
}

operation populateMap() {
	var blocks = getAllBlocks();
	for(b in blocks) {
		var seq = getLinesFrom(b);
		map.put(b.handle, seq);
	}
}

/*
*This function returns a Sequence{Sequence{}}, containing pairs of {line, target} for the source
*/
operation getLinesFrom(element: Any) {
	var ret = new Sequence;
	var lines = getAllLines();
	for(l in lines) {
		if(l.getSource() = element) {
			var pair = new Sequence;
			pair.add(l);
			pair.add(l.getDestination());
			ret.add(pair);
		}
	}
//	(element + ": " + ret).println();
	return ret;
}


/*
*This function creates the random number and the sum and return them as Sequence{rand, sum}
*/
operation createRand() {
	var ret = new Sequence;
	var rand = new `simulink/Sources/Uniform Random Number`;
	var sum = new `simulink/Math Operations/Sum`;
	
//	var const = new `simulink/Sources/Constant`;
//	const.link(sum, 0);

	rand.link(sum);
	ret.add(rand);
	ret.add(sum);
	return ret;
}
